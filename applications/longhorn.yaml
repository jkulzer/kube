apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: longhorn
  namespace: argocd
spec:
  destination:
    namespace: longhorn-system
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: longhorn
    targetRevision: v1.2.4
    repoURL: https://charts.longhorn.io
    helm:
      releaseName: longhorn
      values: |

        global:
          cattle:
            systemDefaultRegistry: ""

        image:
          longhorn:
            engine:
              repository: longhornio/longhorn-engine
              tag: v1.2.4
            manager:
              repository: longhornio/longhorn-manager
              tag: v1.2.4
            ui:
              repository: longhornio/longhorn-ui
              tag: v1.2.4
            instanceManager:
              repository: longhornio/longhorn-instance-manager
              tag: v1_20220303
            shareManager:
              repository: longhornio/longhorn-share-manager
              tag: v1_20211020
            backingImageManager:
              repository: longhornio/backing-image-manager
              tag: v2_20210820
          csi:
            attacher:
              repository: longhornio/csi-attacher
              tag: v3.2.1
            provisioner:
              repository: longhornio/csi-provisioner
              tag: v2.1.2
            nodeDriverRegistrar:
              repository: longhornio/csi-node-driver-registrar
              tag: v2.3.0
            resizer:
              repository: longhornio/csi-resizer
              tag: v1.2.0
            snapshotter:
              repository: longhornio/csi-snapshotter
              tag: v3.0.3
          pullPolicy: IfNotPresent

        service:
          ui:
            type: ClusterIP
            nodePort: null
          manager:
            type: ClusterIP
            nodePort: ""

        persistence:
          defaultClass: true
          defaultFsType: ext4
          defaultClassReplicaCount: 1
          reclaimPolicy: Delete
          recurringJobSelector:
            enable: false
            jobList: []
          backingImage:
            enable: false
            name: ~
            dataSourceType: ~
            dataSourceParameters: ~
            expectedChecksum: ~

        csi:
          kubeletRootDir: ~
          attacherReplicaCount: ~
          provisionerReplicaCount: ~
          resizerReplicaCount: ~
          snapshotterReplicaCount: ~

        defaultSettings:
          backupTarget: ~
          backupTargetCredentialSecret: ~
          allowRecurringJobWhileVolumeDetached: ~
          createDefaultDiskLabeledNodes: ~
          defaultDataPath: ~
          defaultDataLocality: ~
          replicaSoftAntiAffinity: ~
          replicaAutoBalance: ~
          storageOverProvisioningPercentage: ~
          storageMinimalAvailablePercentage: 5
          upgradeChecker: ~
          defaultReplicaCount: 1
          defaultLonghornStaticStorageClass: ~
          backupstorePollInterval: ~
          taintToleration: ~
          systemManagedComponentsNodeSelector: ~
          priorityClass: ~
          autoSalvage: ~
          autoDeletePodWhenVolumeDetachedUnexpectedly: ~
          disableSchedulingOnCordonedNode: ~
          replicaZoneSoftAntiAffinity: ~
          nodeDownPodDeletionPolicy: ~
          allowNodeDrainWithLastHealthyReplica: ~
          mkfsExt4Parameters: ~
          disableReplicaRebuild: ~
          replicaReplenishmentWaitInterval: ~
          concurrentReplicaRebuildPerNodeLimit: ~
          disableRevisionCounter: ~
          systemManagedPodsImagePullPolicy: ~
          allowVolumeCreationWithDegradedAvailability: ~
          autoCleanupSystemGeneratedSnapshot: ~
          concurrentAutomaticEngineUpgradePerNodeLimit: 1
          backingImageCleanupWaitInterval: ~
          backingImageRecoveryWaitInterval: ~
          guaranteedEngineManagerCPU: ~
          guaranteedReplicaManagerCPU: ~
        privateRegistry:
          registryUrl: ~
          registryUser: ~
          registryPasswd: ~
          registrySecret: ~

        longhornManager:
          priorityClass: ~
          tolerations: []
          nodeSelector: {}

        longhornDriver:
          priorityClass: ~
          tolerations: []
          nodeSelector: {}

        longhornUI:
          priorityClass: ~
          tolerations: []
          nodeSelector: {}

        resources: {}
        ingress:
          enabled: true
          ingressClassName: ~
          host: longhorn.2hu.net
          tls: true
          annotations:
            flame.pawelmalak/type: application # "app" works too
            flame.pawelmalak/name: Longhorn
            flame.pawelmalak/url: https://longhorn.2hu.net
            flame.pawelmalak/icon: harddisk
          secrets:

        enablePSP: true

        namespaceOverride: ""

        annotations: {}
