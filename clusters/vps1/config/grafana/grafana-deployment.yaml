---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: grafana
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsNonRoot: true
        runAsUser: 472
      containers:
      - name: grafana
        image: grafana/grafana:10.1.2
        env:
        - name: GF_SERVER_ROOT_URL
          value: "https://grafana.kube.home"
        - name: GF_AUTH_GENERIC_OAUTH_ENABLED
          value: "true"
        - name: GF_AUTH_GENERIC_OAUTH_NAME
          value: Authelia
        - name: GF_AUTH_GENERIC_OAUTH_CLIENT_ID
          value: grafana
        - name: GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: grafana-oidc-secret
              key: GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET
        - name: GF_AUTH_GENERIC_OAUTH_SCOPES
          value: openid profile email groups
        - name: GF_AUTH_GENERIC_OAUTH_EMPTY_SCOPES
          value: "false"
        - name: GF_AUTH_GENERIC_OAUTH_AUTH_URL
          value: https://auth.kube.home/api/oidc/authorization
        - name: GF_AUTH_GENERIC_OAUTH_TOKEN_URL
          value: https://auth.kube.home/api/oidc/token
        - name: GF_AUTH_GENERIC_OAUTH_API_URL
          value: https://auth.kube.home/api/oidc/userinfo
        - name: GF_AUTH_GENERIC_OAUTH_LOGIN_ATTRIBUTE_PATH
          value: preferred_username
        - name: GF_AUTH_GENERIC_OAUTH_GROUPS_ATTRIBUTE_PATH
          value: groups
        - name: GF_AUTH_GENERIC_OAUTH_USE_PKCE
          value: "true"
        - name: GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH
          value: "contains(groups[*], 'kubeadmin') && 'Admin' || contains(groups[*], 'Grafana Editors') && 'Editor' || 'Viewer'"
        # Disables the login form as only OIDC gets used
        - name: GF_AUTH_DISABLE_LOGIN_FORM
          value: "true"
        volumeMounts:
        # - name: grafana-data
        #   mountPath: /var/lib/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards-provisioning
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-dashboards-json
          mountPath: /dashboards/main
        - name: trusted-bundle-distribution
          mountPath: /etc/ssl/certs
        ports:
          - name: grafana
            protocol: TCP
            containerPort: 3000
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          timeoutSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
      volumes:
      # - name: grafana-data
      #   persistentVolumeClaim:
      #     claimName: grafana
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards-provisioning
        configMap:
          name: grafana-dashboards
      - name: grafana-dashboards-json
        configMap:
          name: grafana-dashboards-json
      - name: trusted-bundle-distribution
        configMap:
          name: trusted-bundle-distribution
