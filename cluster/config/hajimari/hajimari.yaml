---
apiVersion: v1
kind: Namespace
metadata:
  name: hajimari
  labels:
    app: hajimari
---
apiVersion: v1
kind: LimitRange
metadata:
  name: cpu-limit-range
  namespace: hajimari
spec:
  limits:
  - default:
      cpu: 0.2
    defaultRequest:
      cpu: 0.1
    type: Container
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hajimari
  namespace: hajimari
  labels:
    app: hajimari
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hajimari-settings
  namespace: hajimari
  labels:
    app: hajimari
data:
  config.yaml: |-
    defaultEnable: false
    name: Johannes
    namespaceSelector: 
      any: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: hajimari
  labels:
    app: hajimari
rules:
- apiGroups: ["", "extensions", "networking.k8s.io"]
  resources: ["ingresses", "namespaces"]
  verbs: ["get", "list"]
---
# Source: hajimari/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: hajimari
  labels:
    app: hajimari
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hajimari
subjects:
- kind: ServiceAccount
  name: hajimari
  namespace: hajimari
---
apiVersion: v1
kind: Service
metadata:
  name: hajimari
  namespace: hajimari
  labels:
    app: hajimari
  annotations:
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: hajimari
---
# Source: hajimari/templates/common.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hajimari
  namespace: hajimari
  labels:
    app: hajimari
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: hajimari
  template:
    metadata:
      labels:
        app: hajimari
    spec:
      serviceAccountName: hajimari
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: hajimari
          image: "ghcr.io/toboshii/hajimari:v0.3.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: "TZ"
              value: "MEZ"
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          volumeMounts:
            - name: hajimari-settings
              mountPath: /config/config.yaml
              subPath: config.yaml
          livenessProbe:
            tcpSocket:
              port: 3000
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 3000
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 3000
            initialDelaySeconds: 0
            failureThreshold: 30
            timeoutSeconds: 1
            periodSeconds: 5
      volumes:
        - name: hajimari-settings
          configMap:
            name: hajimari-settings
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: hajimari
  namespace: hajimari
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/auth-url: http://ak-outpost-default-outpost.authentik.svc.cluster.local:9000/outpost.goauthentik.io/auth/nginx
    nginx.ingress.kubernetes.io/auth-signin: https://home.kube.home/outpost.goauthentik.io/start?rd=$host$uri
    nginx.ingress.kubernetes.io/auth-response-headers: Set-Cookie,X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid
    nginx.ingress.kubernetes.io/auth-snippet: proxy_set_header X-Forwarded-Host $http_host;
  labels:
    app: hajimari
spec:
  tls:
  - hosts:
    - home.kube.home
  rules:
  - host: home.kube.home
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: hajimari
            port:
              name: http
---
#apiVersion: networking.k8s.io/v1
  #kind: Ingress
  #metadata:
  #name: hajimari-auth
    #namespace: authentik
    #annotations:
    #kubernetes.io/ingress.class: nginx
      #nginx.ingress.kubernetes.io/auth-url: http://ak-outpost-default-outpost.authentik.svc.cluster.local:9000/outpost.goauthentik.io/auth/nginx
      #nginx.ingress.kubernetes.io/auth-signin: https://home.kube.home/outpost.goauthentik.io/start?rd=$host$uri
      #nginx.ingress.kubernetes.io/auth-response-headers: Set-Cookie,X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid
      #nginx.ingress.kubernetes.io/auth-snippet: proxy_set_header X-Forwarded-Host $http_host;
      #spec:
  #rules:
    #- host: home.kube.home
    #http:
      #paths:
        #- path: /outpost.goauthentik.io
        #pathType: Prefix
          #backend:
          #service:
            #name: ak-outpost-default-outpost
              #port:
              #number: 9000
