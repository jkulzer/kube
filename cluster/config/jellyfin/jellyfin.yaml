---
apiVersion: v1
kind: Namespace
metadata:
  name: jellyfin
  namespace: jellyfin
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jellyfin-config
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: jellyfin
  labels:
    app: jellyfin
spec:
  ports:
  - name: web
    port: 8096
    protocol: TCP
    targetPort: 8096
  selector:
    app: jellyfin
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jellyfin
  namespace: jellyfin
spec:
  selector:
    matchLabels:
      app: jellyfin
  template:
    metadata:
      labels:
        app: jellyfin
    spec:
      containers:
      - env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: docker.io/jellyfin/jellyfin
        imagePullPolicy: IfNotPresent
        name: jellyfin
        ports:
        - containerPort: 8096
          protocol: TCP
        volumeMounts:
        - mountPath: /data/media/anime
          name: anime
          readOnly: True
        - mountPath: /data/media/movies
          name: movies
          readOnly: True
        - mountPath: /data/media/shows
          name: shows
          readOnly: True
        - mountPath: /config
          name: jellyfin-config
      restartPolicy: Always
      volumes:
      - name: anime
        nfs:
          server: sakuya.kube.home
          path: "/mnt/hdd01/Johannes/Anime"
      - name: movies
        nfs:
          server: sakuya.kube.home
          path: "/mnt/hdd01/Johannes/Movies"
      - name: shows
        nfs:
          server: sakuya.kube.home
          path: "/mnt/hdd01/Johannes/Shows"
      - name: jellyfin-config
        persistentVolumeClaim:
          claimName: jellyfin-config
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jellyfin
  namespace: jellyfin
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  tls:
  - hosts:
    - jellyfin.kube.home
  rules:
  - host: jellyfin.kube.home
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: jellyfin
            port:
              name: web
