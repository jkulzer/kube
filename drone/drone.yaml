---
apiVersion: v1
kind: Namespace
metadata:
  name: drone
  annotations:
    app: drone-server
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: drone
  namespace: drone
---
kind: "PersistentVolumeClaim"
apiVersion: "v1"
metadata:
  name: drone-server
  namespace: drone
  labels:
    app: drone-server
spec:
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: "10Gi"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: drone
  name: drone-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: drone-server
  template:
    metadata:
      annotations:
        vault.security.banzaicloud.io/vault-addr: "http://vault.vault.svc.cluster.local:8200"
        vault.security.banzaicloud.io/vault-role: "drone"
        vault.security.banzaicloud.io/vault-path: "kubernetes"
      labels:
        app: drone-server
    spec:
      serviceAccountName: drone
      containers:
        - name: drone-server
          image: drone/drone:2
          imagePullPolicy: Always
          volumeMounts:
            - mountPath: "/var/lib/drone"
              name: "drone-data"
            - name: public-key
              mountPath: "/etc/ssl/certs/kube-cert.crt"
              subPath: kube-cert.crt
              readOnly: true
          env:
            - name: DRONE_GITEA_SERVER
              value: https://git.kube.home
            - name: DRONE_SERVER_HOST
              value: drone.kube.home
            - name: DRONE_SERVER_PROTO
              value: https
            - name: DRONE_GITEA_CLIENT_ID
              value: "vault:kv/kube/drone/#gitea-client-id"
            - name: DRONE_GITEA_CLIENT_SECRET
              value: "vault:kv/kube/drone/#gitea-client-secret"
            - name: DRONE_RPC_SECRET
              value: "vault:kv/kube/drone/#drone-rpc-secret"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
      restartPolicy: Always
      volumes:
      - name: "public-key"
        configMap:
          name: wildcard-kube-home-distribution
      - name: "drone-data"
        persistentVolumeClaim:
          claimName: drone-server
      - name: "drone-db"
        persistentVolumeClaim:
          claimName: drone-server
---
apiVersion: v1
kind: Service
metadata:
  name: drone-server-ui
  # dont name the service drone-server because it can break variables assigned by drone itself
  namespace: drone
  labels:
    app: drone-server
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app: drone-server
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: drone-server-ui
  namespace: drone
  annotations:
    kubernetes.io/ingress.class: "nginx"
  labels:
    app: drone-server
spec:
  tls:
  - hosts:
    - drone.kube.home
  rules:
  - host: drone.kube.home
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: drone-server-ui
            port:
              name: http
